#########################################################################################
#
# E X P E R I M E N T A L: do not use in production.
#
# Docker container based on Alpine Linux. It contained standard GATB-Tool binaries
# originally made using gcc/g++ compiler on a Debian 7 system. 
#
# PROS: no need to recompile GATB-Tools
# Big CONS: binaries generate libc++ version warnings... 
#
# Solution: 
#  1. use Dockerfile.alpine-compiler to generate native GATB-Tool binaries
#     for Alpine Linux
#  2. use Dockerfile.alpine2 to wrap these binaires into a single compact Alpine
#     container. Here, GATB-Tools work like a charm without any libc++ warnings.
#
#########################################################################################
#
#  Docker file for GATB-Tools project.
#
#  It prepares a Docker container to run various GATB-Tools jobs: 
#
#    Simka               : https://github.com/GATB/simka       <== Visualization not working (see below)
#    DSK                 : https://github.com/GATB/dsk
#    BLOOCOO             : https://github.com/GATB/bloocoo
#    MindTheGap          : https://github.com/GATB/MindTheGap  <== NOT working in Alpine Container (see below)
#    MINIA               : https://github.com/GATB/minia
#    SHORT READ CONNECTOR: https://github.com/GATB/short_read_connector
#    DISCOSNP            : https://github.com/GATB/DiscoSnp
#    TAKEABREAK          : https://github.com/GATB/TakeABreak
#    
#########################################################################################
#
# == Docker build command:
#
#    docker build -f Dockerfile.alpine -t gatb_tools_machine .
#
# == Docker test command:
#
#    docker run --rm -i -t gatb_tools_machine -c test
#
#    -> you should see all GATB-Tools tests with some provided data.
#
#    docker run --rm -i -t gatb_tools_machine -c version
#
#    -> you should see version of all GATB-Tools contained here.
#
# == Running a Tool job:
#
#    docker run --rm -i -t gatb_tools_machine -c <command> -- <arguments>
#
#    where:
#        <command>: see ./run-tool.sh
#      <arguments>: see ./run-tool.sh
#
# == Sample Simka job with provided data:
#    
#    To illustrate the use of this GATB-Tools Docker Image, let's take the example of
#    running SIMKA tool.
#
#    docker run --rm -i -t -v $PWD:/tmp gatb_tools_machine -c simka -- -in /opt/simka/example/simka_input.txt -out /tmp/simka_results/ -out-tmp /tmp/simka_temp_output
#
#    -> you should have results in $PWD/simka_results directory when Simka job is done.
#
# == Additional notes
# 
#   Root access inside the container:
#
#     - if running: docker exec -it gatb_tools_machine bash
#
#     - if not yet running: docker run --rm -i -t gatb_tools_machine bash
#
#########################################################################################

FROM alpine:3.6
# (image size after: 4Mb)

# who to blame?
MAINTAINER Patrick Durand patrick.durand@inria.fr

# ###
#     Package installation and configuration
#
#     1. We need zlib, glibc and libc++ to execute GATB-Tools
#     2. GATB-Tools dependencies are as follows: 
#        a. Simka     : python-2.7 and R
#        b. Bloocoo   : none
#        c. DSK       : coreutil (DSK test script uses the paste command)
#        d. MindTheGap: util-linux (MindTheGap test script requires the command
#                       'column' which is included in bsdmainutils Debian package)
#        e. Minia     : none
#        f. RConnector: none
#        g. DiscoSnp  : python-2.7
#        h. TakeABreak: none
#        i. all       : bash (test scripts)
#     3. we need curl to reuse "as is" GATB-Tools Docker install commands 
#        from Debian Dockerfile
#     4. we create the /opt directory
#
# from: https://github.com/sgerrand/alpine-pkg-glibc 
RUN apk add --no-cache --update-cache wget ca-certificates && \
    wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://raw.githubusercontent.com/sgerrand/alpine-pkg-glibc/master/sgerrand.rsa.pub && \
    wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.25-r0/glibc-2.25-r0.apk && \
    apk add glibc-2.25-r0.apk && \
    apk add --no-cache curl bash util-linux coreutils zlib-dev libstdc++ && \
    mkdir -p /opt
# (image size after: 28Mb)

# from: https://github.com/sgerrand/alpine-pkg-R
RUN wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://github.com/sgerrand/alpine-pkg-R/releases/download/3.3.1-r0/sgerrand.rsa.pub && \
    wget https://github.com/sgerrand/alpine-pkg-R/releases/download/3.3.1-r0/R-3.3.1-r0.apk && \
    apk add R-3.3.1-r0.apk
# (image size after: 133Mb)

RUN apk add --no-cache python2 
# (image size after: 169Mb)

# added to fix this issue (e.g. when running simka):
#  ../bin/simka: error while loading shared libraries: libz.so.1: cannot open shared object file: No such file or directory
ENV LD_LIBRARY_PATH=/lib:/lib64:/usr/lib

# ###
#     SIMKA installation: get the binary release from Github mirror.
#
#     We always use the latest official binary release available.
ENV SIMKA_VERSION=1.4.0
RUN cd /opt \
    && export SIMKA_TGZ=simka-v${SIMKA_VERSION}-bin-Linux.tar.gz \
    && export GIT_URL=https://github.com/GATB/simka/releases/download \
    && export SIMKA_URL=${GIT_URL}/v${SIMKA_VERSION}/${SIMKA_TGZ} \
    && curl -ksL ${SIMKA_URL} | tar xz \
    && rm -f ${SIMKA_TGZ} \
    && mv simka-v${SIMKA_VERSION}-bin-Linux simka \
    && cd simka/bin \
    && chmod +x simka* \
    && cd ../example \
    && chmod +x *.sh  \
    && ./simple_test.sh
# (image size after: 202Mb)

# Simka Visualization: not available: required X11 !!!

# ###
#     DSK installation: get the binary release from Github mirror.
#
#     We always use the latest official binary release available.
ENV DSK_VERSION=2.2.0
RUN cd /opt \
    && export DSK_TGZ=dsk-v${DSK_VERSION}-bin-Linux.tar.gz \
    && export GIT_URL=https://github.com/GATB/dsk/releases/download \
    && export DSK_URL=${GIT_URL}/v${DSK_VERSION}/${DSK_TGZ} \
    && curl -ksL ${DSK_URL} | tar xz \
    && rm -f ${DSK_TGZ} \
    && mv dsk-v${DSK_VERSION}-bin-Linux dsk \
    && cd dsk/bin \
    && chmod +x * \
    && cd ../test \
    && chmod +x *.sh  \
    && ./simple_test.sh
# (image size after: 220Mb)

# ###
#     BLOOCOO installation: get the binary release from Github mirror.
#
#     We always use the latest official binary release available.
ENV BLOOCOO_VERSION=1.0.7
RUN cd /opt \
    && export BLOOCOO_TGZ=Bloocoo-v${BLOOCOO_VERSION}-bin-Linux.tar.gz \
    && export GIT_URL=https://github.com/GATB/bloocoo/releases/download \
    && export BLOOCOO_URL=${GIT_URL}/v${BLOOCOO_VERSION}/${BLOOCOO_TGZ} \
    && curl -ksL ${BLOOCOO_URL} | tar xz \
    && rm -f ${BLOOCOO_TGZ} \
    && mv Bloocoo-v${BLOOCOO_VERSION}-bin-Linux bloocoo \
    && cd bloocoo/bin \
    && chmod +x * \
    && cd ../test \
    && chmod +x *.sh \
    && ./simple_test.sh
# (image size after: 247Mb)

# ###
#     MINDTHEGAP installation: get the binary release from Github mirror.
#
#     We always use the latest official binary release available.
ENV MIND_VERSION=2.0.2
RUN cd /opt \
    && export MIND_TGZ=MindTheGap-v${MIND_VERSION}-bin-Linux.tar.gz \
    && export GIT_URL=https://github.com/GATB/MindTheGap/releases/download \
    && export MIND_URL=${GIT_URL}/v${MIND_VERSION}/${MIND_TGZ} \
    && curl -ksL ${MIND_URL} | tar xz \
    && rm -f ${MIND_TGZ} \
    && mv MindTheGap-v${MIND_VERSION}-bin-Linux MindTheGap \
    && cd MindTheGap/bin \
    && chmod +x * \
    && cd ../test \
    && chmod +x *.sh \
    && ./simple_test.sh

# ###
#     GATB-Core installation: get the binary release from Github mirror.
#     Note: we only keep HDF5 utility tools: dbgh5, dbginfo, h5dump
#
#     We always use the latest official binary release available.
ENV GCORE_VERSION=1.3.0
RUN cd /opt \
    && export GCORE_TGZ=gatb-core-${GCORE_VERSION}-bin-Linux.tar.gz \
    && export GIT_URL=https://github.com/GATB/gatb-core/releases/download \
    && export GCORE_URL=${GIT_URL}/v${GCORE_VERSION}/${GCORE_TGZ} \
    && curl -ksL ${GCORE_URL} | tar xz \
    && rm -f ${GCORE_TGZ} \
    && mv gatb-core-${GCORE_VERSION}-bin-Linux gatb-core \
    && cd gatb-core \
    && rm -rf examples include lib test/gatb-core-cppunit \
    && cd bin \
    && chmod +x * \
    && mv gatb-h5dump h5dump

COPY test-gcore.sh /opt/gatb-core
RUN cd /opt/gatb-core && ./test-gcore.sh && rm -f /opt/gatb-core/bin/reads3.fa.h5
# (image size after: 286Mb)

# ###
#     MINIA installation: get the binary release from Github mirror.
#
#     We always use the latest official binary release available.
ENV MINIA_VERSION=2.0.7
RUN cd /opt \
    && export MINIA_TGZ=minia-v${MINIA_VERSION}-bin-Linux.tar.gz \
    && export GIT_URL=https://github.com/GATB/minia/releases/download \
    && export MINIA_URL=${GIT_URL}/v${MINIA_VERSION}/${MINIA_TGZ} \
    && curl -ksL ${MINIA_URL} | tar xz \
    && rm -f ${MINIA_TGZ} \
    && mv minia-v${MINIA_VERSION}-bin-Linux minia \
    && cd minia/bin \
    && chmod +x * 
# (image size after: 302Mb)

# ###
#     SHORT-READ-CONNECTOR installation: get the binary release from Github mirror.
#
#     We always use the latest official binary release available.
ENV SRC_VERSION=1.1.0
RUN cd /opt \
    && export SRC_TGZ=rconnector-v${SRC_VERSION}-bin-Linux.tar.gz \
    && export GIT_URL=https://github.com/GATB/short_read_connector/releases/download \
    && export SRC_URL=${GIT_URL}/v${SRC_VERSION}/${SRC_TGZ} \
    && curl -ksL ${SRC_URL} | tar xz \
    && rm -f ${SRC_TGZ} \
    && mv rconnector-v${SRC_VERSION}-bin-Linux rconnector \
    && cd rconnector \
    && chmod +x *.sh \
    && cd bin \
    && chmod +x * \
    && cd ../test \
    && chmod +x *.sh \
    && ./simple_test.sh
# (image size after: 302Mb)

# ###
#     DISCO-SNP installation: get the binary release from Github mirror.
#
#     We always use the latest official binary release available.
ENV DSNP_VERSION=2.2.10
RUN cd /opt \
    && export DSNP_TGZ=DiscoSNP.-v${DSNP_VERSION}-bin-Linux.tar.gz \
    && export GIT_URL=https://github.com/GATB/DiscoSnp/releases/download \
    && export DSNP_URL=${GIT_URL}/v${DSNP_VERSION}/${DSNP_TGZ} \
    && curl -ksL ${DSNP_URL} | tar xz \
    && rm -f ${DSNP_TGZ} \
    && mv DiscoSNP++-v${DSNP_VERSION}-bin-Linux discosnp \
    && cd discosnp \
    && chmod +x *.sh \
    && cd bin \
    && chmod +x * \
    && cd ../scripts \
    && chmod +x *.sh \
    && cd ../test \
    && chmod +x *.sh \
    && ./simple_test.sh
# (image size after: 402Mb)

# ###
#     TAKE-A-BREAK installation: get the binary release from Github mirror.
#
#     We always use the latest official binary release available.
ENV TABK_VERSION=1.1.2
RUN cd /opt \
    && export TABK_TGZ=TakeABreak-v${TABK_VERSION}-bin-Linux.tar.gz \
    && export GIT_URL=https://github.com/GATB/TakeABreak/releases/download \
    && export TABK_URL=${GIT_URL}/v${TABK_VERSION}/${TABK_TGZ} \
    && curl -ksL ${TABK_URL} | tar xz \
    && rm -f ${TABK_TGZ} \
    && mv TakeABreak-v${TABK_VERSION}-bin-Linux TakeABreak \
    && cd TakeABreak/bin \
    && chmod +x * \
    && cd ../tests \
    && chmod +x *.sh \
    && ./simple_test.sh
# (image size after: 475Mb)

# ###
#     Starter script.
#
COPY run-tool.sh /opt

# Fix: ensure script has exec permission
RUN chmod +x /opt/run-tool.sh

# ###
#     Start a GATB-Tool. See "run-tool.sh" header for more information.
#
ENTRYPOINT ["/opt/run-tool.sh"]
